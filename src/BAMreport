#!/usr/bin/env python

"""
    usage:
     BAMreport [options] reference.fa alignments.bam

    where the options are:
        -h,--help : print usage and quit
        -d,--debug: print debug information
        -r,--reportdir: name of the directory where the output is put [report]
        -w,--windowsize: window size used in calculating GC-coverage [1000000]

    This creates a directory which is user specified and puts all the output 
    files in it. The output files include the following:
    1) stats.txt : Alignment statistics
    2) nucleotides.pdf : Nucleotide composition vs. position on sequence
    3) quality.pdf : Base quality vs position on sequence
    4) coverage.pdf : Depth of coverage distribution
    5) gccoverage.png : Variation of GC and coverage 
    6) insertlengths.pdf : Insert length distribution
    7) readlengths.pdf : Variation of read lengths
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError
from tempfile import mkstemp
from subprocess import call

import os

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

def CreateTempFile():
    """ Use mkstemp to create a temporary file
    """
    fd,name = mkstemp(dir = ".")
    os.close(fd)
    return name

def RemoveTempFile(name):
    try:
        os.remove(name)
    except OSError as e:
        print >> stderr, "Removal of %s failed: %s" % (name, e)
        exit(4)

def RunCommand(command):
    try:
        call(command)
    except OSError as e:
        print >> stderr, "Execution of %s failed: %s", (command,e)
        exit(5)

def main(refName, alnName, outdir, windowsize):
    # create the output directory
    try:
        os.mkdir(outdir)
    except OSError as e:
        print >> stderr, "Creation of outdir \"%s\" failed: %s" % (outdir, e)
        exit(6)    

    # run bamstats to get the relevant information
    DIR = os.path.dirname(os.path.realpath(__file__))
    statsName = "%s/stats.txt" % outdir
    nucName = CreateTempFile()
    qualName = CreateTempFile()
    covName = CreateTempFile()
    gccovName = CreateTempFile()
    insName = CreateTempFile()
    rlName = CreateTempFile()

    command = ["%s/bamstats" % DIR,
               "-s", statsName, 
               "-n", nucName, 
               "-q", qualName,
               "-c", covName,
               "-g", gccovName,
               "-i", insName,
               "-l", rlName,
               "-w", str(windowsize),
               refName, alnName]
    RunCommand(command)

    # run the plot scripts to generate the relevant plots
    command = ["Rscript", '--no-init-file', "%s/plotnuccomp.R" % DIR, nucName, "%s/nucleotides.pdf" % outdir]
    RunCommand(command)

    command = ["Rscript", '--no-init-file', "%s/plotqualities.R" % DIR, qualName, "%s/quality.pdf" % outdir]
    RunCommand(command)

    command = ["Rscript", '--no-init-file', "%s/plotcoverage.R" % DIR, covName, "%s/coverage.pdf" % outdir]
    RunCommand(command)

    command = ["Rscript", '--no-init-file', "%s/plotgccoverage.R" % DIR, gccovName, "%s/gccoverage.png" % outdir]
    RunCommand(command)

    command = ["Rscript", '--no-init-file', "%s/plotinsertlengths.R" % DIR, insName, "%s/insertlengths.pdf" % outdir]
    RunCommand(command)

    command = ["Rscript", '--no-init-file', "%s/plotreadlengths.R" % DIR, rlName, "%s/readlengths.pdf" % outdir]
    RunCommand(command)

    # clean up
    RemoveTempFile(nucName)
    RemoveTempFile(qualName)
    RemoveTempFile(covName)
    RemoveTempFile(gccovName)
    RemoveTempFile(insName)
    RemoveTempFile(rlName)

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdr:w:",["help", "debug", "reportdir=", "windowsize="])
    except GetoptError, err:
        print str(err)
        print >> stderr, __doc__
        exit(2) 

    outdir = "report"
    windowsize = 1000000

    for o, a in opts:
        if o in ("-h", "--help"):
            print >> stderr, __doc__
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-r", "--reportdir"):
            outdir = a
        elif o in ("-w", "--windowsize"):
            windowsize = int(a)
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        print >> stderr, __doc__
        exit(3)

    main(args[0], args[1], outdir, windowsize)
